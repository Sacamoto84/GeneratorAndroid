package com.example.generator2.ui.wiget

import androidx.compose.animation.Crossfade
import androidx.compose.animation.core.animateDpAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.width
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import com.example.generator2.ui.ConfigOnOff
import libs.modifier.UImodifier.noRippleClickable
import libs.ImageAsset

object UIswitch {

    @Composable
    fun ON_OFF(
        state: Boolean,
        config: ConfigOnOff,
        onClick: () -> Unit = {},
        modifier: Modifier = Modifier
    ) {

        val offsetAnimation: Dp by animateDpAsState(
            targetValue = if (state) config.groupPositionOn else config.groupPositionOff,
            animationSpec =// spring(
            //dampingRatio = Spring.DampingRatioMediumBouncy
            //     //,stiffness = Spring.StiffnessLow
            // )
            tween(
                durationMillis = 500,
                //easing = CubicBezierEasing(0.4f, 0.0f, 0.8f, 0.8f)
                //    easing = FastOutSlowInEasing
            )

            //keyframes {
            //    durationMillis = 1000
            //    50.dp.at(20).with(LinearEasing)
            //    200.dp.at(600).with(LinearOutSlowInEasing)
            //    250.dp.at(700).with(FastOutSlowInEasing)
            //}

            //repeatable(iterations = 5, animation = tween(), repeatMode = RepeatMode.Reverse)

        )

        //val scale by remember { mutableStateOf(2.0f) }
        val koef: Float = config.componentPixelH / config.componentPixelW
        val cW: Float = config.componentW
        val cH: Float = cW * koef

        Box(
            modifier =
            Modifier
                .then(modifier)
                .noRippleClickable()
        )
        {

            //var currentPage by remember { mutableStateOf("A") }
            Crossfade(targetState = state, animationSpec = tween(200)) { state1 ->
                when (state1) {
                    true -> ImageAsset(
                        path = config.pathOn,
                        modifier = Modifier
                            .height(cH.dp)
                            .width(cW.dp)
                    )
                    false -> ImageAsset(
                        path = config.pathOff,
                        modifier = Modifier
                            .height(cH.dp)
                            .width(cW.dp)
                    )
                }
            }

            val koefGroup: Float = config.groupPixelH / config.groupPixelW
            val gW: Float = config.groupW
            val gH: Float = gW * koefGroup

            if (config.pathGroup != "")
                ImageAsset(
                    path = config.pathGroup,
                    modifier = Modifier
                        .height(gH.dp)
                        .width(gW.dp)
                        .offset(x = offsetAnimation, y = config.groupDeltaY)
                )

        }
    }


}