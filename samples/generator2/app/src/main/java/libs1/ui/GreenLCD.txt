package com.example.generator2.ui

import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.Paint
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.scale
import androidx.compose.ui.graphics.FilterQuality
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import com.example.generator2.R
import androidx.compose.foundation.*
import androidx.compose.material.Text
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import libs.Image9Patch


private const val sizeDot = 9f//11f       //Размер точки
private const val idleDot = 3f//3f        //Расстояние между точкими
private const val offsetMatrix = 1.0f   //Коррекция мещения при постороении матрицы

private const val startX = 14f + 6f          //Начало матрицы
private const val startY = 14f + 14f         //

private const val indicatorCount = 8    //Количество индикаторов

//Зеленый вариант
//private const val colorBg = 0x86b519    //Цвет фона
//private const val colorPlug = 0x7eaa0b //Цвет подложки
//private const val colorText = 0 //Цвет текста


//Голубой вариант
private const val colorBg = 0x1e2327//0x262d32
private const val colorPlug = 0x1e2a39//0x263649
private const val colorText = 0x23c1ff//0x1d9fd2

//Серый вариант
//private const val colorBg   = 0xc3c3c3
//private const val colorPlug = 0xb8b8b8
//private const val colorText = 0

class GreenLCD48(lcdHeight: Dp = 180.dp ) {

    private lateinit var bitmapBg: Bitmap //Фоновый бэкграунд
    private lateinit var bitmap: Bitmap
    private lateinit var canvas: Canvas
    private var height: Dp

    //private val koef = 380f / 98f

    private val origW = 850f //Размер Canvas
    private val origH = 545f//155f //10  -> 155f

    private val koef = origW / origH

    private val segmentX = 64 //Количество сигментов по высоте
    private val segmentY = 39 //10 //Количество сигментов по высоте

    //Пиксельный буффер
    private val bufferLcd = Array(segmentY) { Array(segmentX) { 0 } }

    var textPosition: Int = 0 //Позиция для строки

    init {
        height = lcdHeight
        bitmap = Bitmap.createBitmap(origW.toInt(), origH.toInt(), Bitmap.Config.ARGB_8888)
        canvas = Canvas(bitmap)
        //Для фона
        bitmapBg = Bitmap.createBitmap(origW.toInt(), origH.toInt(), Bitmap.Config.ARGB_8888)
        val canvasBg = Canvas(bitmapBg)
        //Создадим фон
        val paint = Paint()
        paint.color = colorBg
        paint.alpha = 255
        canvasBg.drawRoundRect(0f, 0f, origW - 1f, origH - 1f, 14f, 14f, paint)
        clear()
    }

    //Очистка слоя пикселей
    fun clear(color: Int = 0) {
        val paint = Paint()
        paint.color = if (color == 0) colorPlug else color
        paint.alpha = 255
        for (ii in 0 until segmentY) {
            for (i in 0 until segmentX) {
                val offsetX = startX + (i * (sizeDot + idleDot))
                val offsetY = startY + (ii * (sizeDot + idleDot)).toInt()
                canvas.drawRectXY(offsetX, offsetY, sizeDot, sizeDot, paint)
            }
        }
    }

    fun setPixel(x: Int, y: Int, color: Int = 1) {
        val tempX = segmentX - 1
        val tempY = segmentY - 1
        if ((x !in 0..tempX) || (y !in 0..tempY)) {
            return
        }
        bufferLcd[y][x] = color
    }


    //Нарисовать глиф по нужному адресу
    fun drawIcon(
        x: Int,
        y: Int,
        array: IntArray,
        color: Int = 1
    ) {
        val h = array[0]
        val w = array[1]


        val paint = Paint()
        paint.color = colorText
        paint.alpha = 255

        for (i in 0 until h) {

            val b = array[i+2]

            for (j in 0 until w) {
                if (b.shl(j).and(0x8000) != 0) {
                    setPixel((x + j), (y + i), color)
                }
            }

        }
    }


    //Нарисовать глиф по нужному адресу
    fun drawGliph(
        ch: Char,
        x: Int,
        y: Int,
        color: Int = 1
    ) {
        val paint = Paint()
        paint.color = colorText
        paint.alpha = 255
        if (ch < 32.toChar()) return
        val ch1: Byte = ch.toByte()

        //val maxI = segmentY - y
        for (i in 0..8) {
            val b = Font7x10[(ch1 - 32) * 10 + i]
            for (j in 0..6) {
                if (b.shl(j).and(0x8000) != 0) {
                    setPixel((x + j), (y + i), color)
                }
            }
        }
    }

    fun BuffertoBitmap() {
        val paintText = Paint()
        paintText.color = colorText
        paintText.alpha = 255
        val paintPlug = Paint()
        paintPlug.color = colorPlug
        paintPlug.alpha = 255
        for (x in 0 until segmentX) {
            for (y in 0 until segmentY) {
                val offsetX = startX + (x * (sizeDot + idleDot))
                val offsetY = startY + (y * (sizeDot + idleDot))
                canvas.drawRectXY(
                    offsetX,
                    offsetY,
                    sizeDot,
                    sizeDot,
                    if (bufferLcd[y][x] == 1) paintText else paintPlug
                )
            }
        }
    }

    @Composable
    fun render(
        update: Boolean,
        modifier: Modifier = Modifier,
        contentAlignment: Alignment = Alignment.TopEnd
    ) {

        var needUpdate = remember { mutableStateOf(update) }

        Box(
            modifier = Modifier
                .then(modifier)
                .size(height * koef, height),
            //contentAlignment = contentAlignment
        )
        {

            print("lcd render\n")

            Image(
                bitmap = bitmapBg.asImageBitmap(),
                contentDescription = " ",
                modifier = Modifier
                    .padding(
                        start = 1.dp,
                        end = 6.dp,
                        top = 3.dp,
                        bottom = 0.dp
                    )
                    .scale(1f)
                    .offset((2).dp, (-3).dp)
                    .fillMaxSize(),
                contentScale = ContentScale.Fit,
                filterQuality = FilterQuality.High
            )

            BuffertoBitmap()

            Image(
                bitmap = bitmap.asImageBitmap(),
                contentDescription = " ",
                modifier = Modifier
                    .padding(start = 1.dp, end = 3.dp)
                    .scale(1f)
                    .offset((4f).dp, (1).dp)
                    .fillMaxSize(),
                contentScale = ContentScale.Fit,
                filterQuality = FilterQuality.High
            )


            //Image(
            //     painterResource(id = R.drawable.masklcd20),
            //     contentDescription = "",
            //     contentScale = ContentScale.FillBounds, // or some other scale
            //     modifier = Modifier.fillMaxSize(),
            // )

            Image9Patch(
                id = R.drawable.masklcd29, W = origW.dp, H = origH.dp,
                modifier = Modifier.padding(end = 2.dp)
            )


        }


    }

    fun string(x: Int, y: Int, value: String, color: Int = 1) {
        var len = value.length - 1
        //if (len > 7) len = 7
        textPosition = 0
        for (i in 0..len) {
            //Нарисовать глиф по нужному адресу
            drawGliph(
                value[i],
                x + textPosition,
                y,
                color
            )

            when(value[i]){
                ','       ->  textPosition       +=2
                'i', 'I'  ->  textPosition       +=4
                else      ->  textPosition       +=6
            }


        }
    }

}


private fun Canvas.drawRectXY(x: Float, y: Float, H: Float = 100f, W: Float = 100f, paint: Paint) {
    this.drawRect(x, y, x + W, y + H, paint)
}



@Composable
@Preview
fun GreenLCD_Preview() {
    val lcd = GreenLCD48()

    Column {
        Text(
            text = "12345", fontFamily = FontFamily(Font(R.font.led_8x6, FontWeight.Normal)),
            color = Color.White
        )

        lcd.clear(1)

        lcd.drawIcon(0,0, icon1)
        //lcd.drawGliph('&', 1, 1)
        lcd.string(7, 0, "123456")
        lcd.string(7, 8, "123456")
        lcd.render(true)
    }
}


val icon1 = intArrayOf(
    0x000F, //H=15
    0x0005, //W=5
    0xF800, 0xD800, 0x9800, 0xD800, 0xD800, 0x8800, 0xF800, 0x0000, 0xF800, 0x8800, 0xE800, 0x8800, 0xB800, 0x8800, 0xF800, 0x0000,
)


val Font7x10 = intArrayOf(
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // sp
    0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x1000, 0x0000, 0x0000,  // !
    0x2800, 0x2800, 0x2800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // "
    0x2400, 0x2400, 0x7C00, 0x2400, 0x4800, 0x7C00, 0x4800, 0x4800, 0x0000, 0x0000,  // #
    0x0000, 0x4800, 0x4800, 0x4800, 0x4800, 0x4800, 0x4800, 0x0000, 0x0000, 0x0000,  // $ --> ||
    0xF800, 0xD800, 0xD800, 0xD800, 0xD800, 0xD800, 0xF800, 0x0000, 0x0000, 0x0000,  // % ---> 1
    0xF800, 0x8800, 0xE800, 0x8800, 0xB800, 0x8800, 0xF800, 0x0000, 0x0000, 0x0000,  // & ---> 2
    0x1000, 0x1000, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // '
    0x0800, 0x1000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x1000, 0x0800,  // (
    0x2000, 0x1000, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x1000, 0x2000,  // )
    0x1000, 0x3800, 0x1000, 0x2800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // *
    0x0000, 0x0000, 0x1000, 0x1000, 0x7C00, 0x1000, 0x1000, 0x0000, 0x0000, 0x0000,  // +
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x0000, 0x0000, 0x1000,  // ,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3800, 0x0000, 0x0000, 0x0000, 0x0000,  // - -
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x0000, 0x0000, 0x0000,  // .
    0x0800, 0x0800, 0x1000, 0x1000, 0x1000, 0x1000, 0x2000, 0x2000, 0x0000, 0x0000,  // /
    0x7000, 0x8800, 0x9800, 0xA800, 0xC800, 0x8800, 0x7000, 0x0000, 0x0000, 0x0000,  // 0 -
    0x2000, 0x6000, 0x2000, 0x2000, 0x2000, 0x2000, 0x7000, 0x0000, 0x0000, 0x0000,  // 1 -
    0x7000, 0x8800, 0x0800, 0x1000, 0x2000, 0x4000, 0xF800, 0x0000, 0x0000, 0x0000,  // 2 -
    0xF000, 0x0800, 0x0800, 0x7000, 0x0800, 0x0800, 0xF000, 0x0000, 0x0000, 0x0000,  // 3 -
    0x8800, 0x8800, 0x8800, 0xF800, 0x0800, 0x0800, 0x0800, 0x0000, 0x0000, 0x0000,  // 4 -
    0xF800, 0x8000, 0x8000, 0xF000, 0x0800, 0x0800, 0xF000, 0x0000, 0x0000, 0x0000,  // 5 -
    0x7000, 0x8000, 0x8000, 0xF000, 0x8800, 0x8800, 0x7000, 0x0000, 0x0000, 0x0000,  // 6 -
    0xF800, 0x0800, 0x0800, 0x1000, 0x2000, 0x2000, 0x2000, 0x0000, 0x0000, 0x0000,  // 7 -
    0x7000, 0x8800, 0x8800, 0x7000, 0x8800, 0x8800, 0x7000, 0x0000, 0x0000, 0x0000,  // 8 -
    0x7000, 0x8800, 0x8800, 0x7800, 0x0800, 0x8800, 0x7000, 0x0000, 0x0000, 0x0000,  // 9 -
    0x0000, 0x0000, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1000, 0x0000, 0x0000,  // :
    0x0000, 0x0000, 0x0000, 0x1000, 0x0000, 0x0000, 0x0000, 0x1000, 0x1000, 0x1000,  // ;
    0x0000, 0x0000, 0x0C00, 0x3000, 0x4000, 0x3000, 0x0C00, 0x0000, 0x0000, 0x0000,  // <
    0x0000, 0x0000, 0x0000, 0x7C00, 0x0000, 0x7C00, 0x0000, 0x0000, 0x0000, 0x0000,  // =
    0x0000, 0x0000, 0x6000, 0x1800, 0x0400, 0x1800, 0x6000, 0x0000, 0x0000, 0x0000,  // >
    0x3800, 0x4400, 0x0400, 0x0800, 0x1000, 0x1000, 0x0000, 0x1000, 0x0000, 0x0000,  // ?
    0x3800, 0x4400, 0x4C00, 0x5400, 0x5C00, 0x4000, 0x4000, 0x3800, 0x0000, 0x0000,  // @
    0x7000, 0x8800, 0x8800, 0xF800, 0x8800, 0x8800, 0x8800, 0x0000, 0x0000, 0x0000,  // A -
    0xF000, 0x8800, 0x8800, 0xF000, 0x8800, 0x8800, 0xF000, 0x0000, 0x0000, 0x0000,  // B -
    0x7000, 0x8800, 0x8000, 0x8000, 0x8000, 0x8800, 0x7000, 0x0000, 0x0000, 0x0000,  // C -
    0xF000, 0x8800, 0x8800, 0x8800, 0x8800, 0x8800, 0xF000, 0x0000, 0x0000, 0x0000,  // D -
    0xF800, 0x8000, 0x8000, 0xF000, 0x8000, 0x8000, 0xF800, 0x0000, 0x0000, 0x0000,  // E -
    0xF800, 0x8000, 0x8000, 0xF000, 0x8000, 0x8000, 0x8000, 0x0000, 0x0000, 0x0000,  // F -
    0x7000, 0x8800, 0x8000, 0xB800, 0x8800, 0x8800, 0x7000, 0x0000, 0x0000, 0x0000,  // G -
    0x8800, 0x8800, 0x8800, 0xF800, 0x8800, 0x8800, 0x8800, 0x0000, 0x0000, 0x0000,  // H -
    0xE000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0xE000, 0x0000, 0x0000, 0x0000,  // I -
    0x0800, 0x0800, 0x0800, 0x0800, 0x8800, 0x8800, 0x7000, 0x0000, 0x0000, 0x0000,  // J -
    0x8800, 0x9000, 0xA000, 0xC000, 0xA000, 0x9000, 0x8800, 0x0000, 0x0000, 0x0000,  // K -
    0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0xF800, 0x0000, 0x0000, 0x0000,  // L -
    0x8800, 0xD800, 0xA800, 0xA800, 0x8800, 0x8800, 0x8800, 0x0000, 0x0000, 0x0000,  // M -
    0x8800, 0xC800, 0xA800, 0x9800, 0x8800, 0x8800, 0x8800, 0x0000, 0x0000, 0x0000,  // N -
    0x7000, 0x8800, 0x8800, 0x8800, 0x8800, 0x8800, 0x7000, 0x0000, 0x0000, 0x0000,  // O -
    0xF000, 0x8800, 0x8800, 0xF000, 0x8000, 0x8000, 0x8000, 0x0000, 0x0000, 0x0000,  // P -
    0x7000, 0x8800, 0x8800, 0x8800, 0xA800, 0x9000, 0x6800, 0x0000, 0x0000, 0x0000,  // Q -
    0xF000, 0x8800, 0x8800, 0xF000, 0xA000, 0x9000, 0x8800, 0x0000, 0x0000, 0x0000,  // R -
    0x7000, 0x8800, 0x8000, 0x7000, 0x0800, 0x8800, 0x7000, 0x0000, 0x0000, 0x0000,  // S -
    0xF800, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x0000, 0x0000, 0x0000,  // T -
    0x8800, 0x8800, 0x8800, 0x8800, 0x8800, 0x8800, 0x7000, 0x0000, 0x0000, 0x0000,  // U -
    0x8800, 0x8800, 0x8800, 0x8800, 0x8800, 0x5000, 0x2000, 0x0000, 0x0000, 0x0000,  // V -
    0x8800, 0x8800, 0x8800, 0xA800, 0xA800, 0xD800, 0x8800, 0x0000, 0x0000, 0x0000,  // W -
    0x8800, 0x8800, 0x5000, 0x2000, 0x5000, 0x8800, 0x8800, 0x0000, 0x0000, 0x0000,  // X -
    0x8800, 0x8800, 0x8800, 0x5000, 0x2000, 0x2000, 0x2000, 0x0000, 0x0000, 0x0000,  // Y -
    0xF800, 0x0800, 0x1000, 0x2000, 0x4000, 0x8000, 0xF800, 0x0000, 0x0000, 0x0000,  // Z -
    0x1800, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1800,  // [
    0x2000, 0x2000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0800, 0x0800, 0x0000, 0x0000,  /* \ */
    0x3000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x3000,  // ]
    0x1000, 0x2800, 0x2800, 0x4400, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // ^
    0x8800, 0x8800, 0x8BC0, 0xF840, 0x8880, 0x8900, 0x8BC0, 0x0000, 0x0000, 0x0000,  // _ -> Hz
    0x2000, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // `
    0x7000, 0x8800, 0x8800, 0xF800, 0x8800, 0x8800, 0x8800, 0x0000, 0x0000, 0x0000,  // a -
    0xF000, 0x8800, 0x8800, 0xF000, 0x8800, 0x8800, 0xF000, 0x0000, 0x0000, 0x0000,  // b -
    0x7000, 0x8800, 0x8000, 0x8000, 0x8000, 0x8800, 0x7000, 0x0000, 0x0000, 0x0000,  // c -
    0xF000, 0x8800, 0x8800, 0x8800, 0x8800, 0x8800, 0xF000, 0x0000, 0x0000, 0x0000,  // d -
    0xF800, 0x8000, 0x8000, 0xF000, 0x8000, 0x8000, 0xF800, 0x0000, 0x0000, 0x0000,  // e -
    0xF800, 0x8000, 0x8000, 0xF000, 0x8000, 0x8000, 0x8000, 0x0000, 0x0000, 0x0000,  // f -
    0x7000, 0x8800, 0x8000, 0xB800, 0x8800, 0x8800, 0x7000, 0x0000, 0x0000, 0x7800,  // g -
    0x8800, 0x8800, 0x8800, 0xF800, 0x8800, 0x8800, 0x8800, 0x0000, 0x0000, 0x0000,  // h -
    0xE000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0xE000, 0x0000, 0x0000, 0x0000,  // i -
    0x0800, 0x0800, 0x0800, 0x0800, 0x8800, 0x8800, 0x7000, 0x0000, 0x0000, 0xE000,  // j -
    0x8800, 0x9000, 0xA000, 0xC000, 0xA000, 0x9000, 0x8800, 0x0000, 0x0000, 0x0000,  // k -
    0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0xF800, 0x0000, 0x0000, 0x0000,  // l -
    0x8800, 0xD800, 0xA800, 0xA800, 0x8800, 0x8800, 0x8800, 0x0000, 0x0000, 0x0000,  // m -
    0x8800, 0xC800, 0xA800, 0x9800, 0x8800, 0x8800, 0x8800, 0x0000, 0x0000, 0x0000,  // n -
    0x7000, 0x8800, 0x8800, 0x8800, 0x8800, 0x8800, 0x7000, 0x0000, 0x0000, 0x0000,  // o -
    0xF000, 0x8800, 0x8800, 0xF000, 0x8000, 0x8000, 0x8000, 0x0000, 0x4000, 0x4000,  // p -
    0x7000, 0x8800, 0x8800, 0x8800, 0xA800, 0x9000, 0x6800, 0x0000, 0x0000, 0x0400,  // q -
    0xF000, 0x8800, 0x8800, 0xF000, 0xA000, 0x9000, 0x8800, 0x0000, 0x0000, 0x0000,  // r -
    0x7000, 0x8800, 0x8000, 0x7000, 0x0800, 0x8800, 0x7000, 0x0000, 0x0000, 0x0000,  // s -
    0xF800, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x0000, 0x0000, 0x0000,  // t -
    0x8800, 0x8800, 0x8800, 0x8800, 0x8800, 0x8800, 0x7000, 0x0000, 0x0000, 0x0000,  // u -
    0x8800, 0x8800, 0x8800, 0x8800, 0x8800, 0x5000, 0x2000, 0x0000, 0x0000, 0x0000,  // v -
    0x8800, 0x8800, 0x8800, 0xA800, 0xA800, 0xD800, 0x8800, 0x0000, 0x0000, 0x0000,  // w -
    0x8800, 0x8800, 0x5000, 0x2000, 0x5000, 0x8800, 0x8800, 0x0000, 0x0000, 0x0000,  // x -
    0x8800, 0x8800, 0x8800, 0x5000, 0x2000, 0x2000, 0x2000, 0x0000, 0x1000, 0x6000,  // y -
    0xF800, 0x0800, 0x1000, 0x2000, 0x4000, 0x8000, 0xF800, 0x0000, 0x0000, 0x0000,  // z -
    0x1800, 0x1000, 0x1000, 0x1000, 0x2000, 0x2000, 0x1000, 0x1000, 0x1000, 0x1800,  // {
    0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000,  // |
    0x3000, 0x1000, 0x1000, 0x1000, 0x0800, 0x0800, 0x1000, 0x1000, 0x1000, 0x3000,  // }
    0x0000, 0x0000, 0x0000, 0x7400, 0x4C00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000   // ~
)






/*
val Font7x10 = intArrayOf(
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // sp
    0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x1000, 0x0000, 0x0000,  // !
    0x2800, 0x2800, 0x2800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // "
    0x2400, 0x2400, 0x7C00, 0x2400, 0x4800, 0x7C00, 0x4800, 0x4800, 0x0000, 0x0000,  // #
    0x0000, 0x4800, 0x4800, 0x4800, 0x4800, 0x4800, 0x4800, 0x0000, 0x0000, 0x0000,  // $ --> ||
    0xF800, 0xD800, 0xD800, 0xD800, 0xD800, 0xD800, 0xF800, 0x0000, 0x0000, 0x0000,  // % ---> 1
    0xF800, 0x8800, 0xE800, 0x8800, 0xB800, 0x8800, 0xF800, 0x0000, 0x0000, 0x0000,  // & ---> 2
    0x1000, 0x1000, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // '
    0x0800, 0x1000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x1000, 0x0800,  // (
    0x2000, 0x1000, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x1000, 0x2000,  // )
    0x1000, 0x3800, 0x1000, 0x2800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // *
    0x0000, 0x0000, 0x1000, 0x1000, 0x7C00, 0x1000, 0x1000, 0x0000, 0x0000, 0x0000,  // +
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1000, 0x1000, 0x1000,  // ,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3800, 0x0000, 0x0000, 0x0000, 0x0000,  // -
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1000, 0x0000, 0x0000,  // .
    0x0800, 0x0800, 0x1000, 0x1000, 0x1000, 0x1000, 0x2000, 0x2000, 0x0000, 0x0000,  // /
    0x3800, 0x4400, 0x4400, 0x5400, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // 0
    0x1000, 0x3000, 0x5000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x0000,  // 1
    0x3800, 0x4400, 0x4400, 0x0400, 0x0800, 0x1000, 0x2000, 0x7C00, 0x0000, 0x0000,  // 2
    0x3800, 0x4400, 0x0400, 0x1800, 0x0400, 0x0400, 0x4400, 0x3800, 0x0000, 0x0000,  // 3
    0x0800, 0x1800, 0x2800, 0x2800, 0x4800, 0x7C00, 0x0800, 0x0800, 0x0000, 0x0000,  // 4
    0x7C00, 0x4000, 0x4000, 0x7800, 0x0400, 0x0400, 0x4400, 0x3800, 0x0000, 0x0000,  // 5
    0x3800, 0x4400, 0x4000, 0x7800, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // 6
    0x7C00, 0x0400, 0x0800, 0x1000, 0x1000, 0x2000, 0x2000, 0x2000, 0x0000, 0x0000,  // 7
    0x3800, 0x4400, 0x4400, 0x3800, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // 8
    0x3800, 0x4400, 0x4400, 0x4400, 0x3C00, 0x0400, 0x4400, 0x3800, 0x0000, 0x0000,  // 9
    0x0000, 0x0000, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1000, 0x0000, 0x0000,  // :
    0x0000, 0x0000, 0x0000, 0x1000, 0x0000, 0x0000, 0x0000, 0x1000, 0x1000, 0x1000,  // ;
    0x0000, 0x0000, 0x0C00, 0x3000, 0x4000, 0x3000, 0x0C00, 0x0000, 0x0000, 0x0000,  // <
    0x0000, 0x0000, 0x0000, 0x7C00, 0x0000, 0x7C00, 0x0000, 0x0000, 0x0000, 0x0000,  // =
    0x0000, 0x0000, 0x6000, 0x1800, 0x0400, 0x1800, 0x6000, 0x0000, 0x0000, 0x0000,  // >
    0x3800, 0x4400, 0x0400, 0x0800, 0x1000, 0x1000, 0x0000, 0x1000, 0x0000, 0x0000,  // ?
    0x3800, 0x4400, 0x4C00, 0x5400, 0x5C00, 0x4000, 0x4000, 0x3800, 0x0000, 0x0000,  // @
    0x1000, 0x2800, 0x2800, 0x2800, 0x2800, 0x7C00, 0x4400, 0x4400, 0x0000, 0x0000,  // A
    0x7800, 0x4400, 0x4400, 0x7800, 0x4400, 0x4400, 0x4400, 0x7800, 0x0000, 0x0000,  // B
    0x3800, 0x4400, 0x4000, 0x4000, 0x4000, 0x4000, 0x4400, 0x3800, 0x0000, 0x0000,  // C
    0x7000, 0x4800, 0x4400, 0x4400, 0x4400, 0x4400, 0x4800, 0x7000, 0x0000, 0x0000,  // D
    0x7C00, 0x4000, 0x4000, 0x7C00, 0x4000, 0x4000, 0x4000, 0x7C00, 0x0000, 0x0000,  // E
    0x7C00, 0x4000, 0x4000, 0x7800, 0x4000, 0x4000, 0x4000, 0x4000, 0x0000, 0x0000,  // F
    0x3800, 0x4400, 0x4000, 0x4000, 0x5C00, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // G
    0x4400, 0x4400, 0x4400, 0x7C00, 0x4400, 0x4400, 0x4400, 0x4400, 0x0000, 0x0000,  // H
    0x3800, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x3800, 0x0000, 0x0000,  // I
    0x0400, 0x0400, 0x0400, 0x0400, 0x0400, 0x0400, 0x4400, 0x3800, 0x0000, 0x0000,  // J
    0x4400, 0x4800, 0x5000, 0x6000, 0x5000, 0x4800, 0x4800, 0x4400, 0x0000, 0x0000,  // K
    0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x7C00, 0x0000, 0x0000,  // L
    0x4400, 0x6C00, 0x6C00, 0x5400, 0x4400, 0x4400, 0x4400, 0x4400, 0x0000, 0x0000,  // M
    0x4400, 0x6400, 0x6400, 0x5400, 0x5400, 0x4C00, 0x4C00, 0x4400, 0x0000, 0x0000,  // N
    0x3800, 0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // O
    0x7800, 0x4400, 0x4400, 0x4400, 0x7800, 0x4000, 0x4000, 0x4000, 0x0000, 0x0000,  // P
    0x3800, 0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x5400, 0x3800, 0x0400, 0x0000,  // Q
    0x7800, 0x4400, 0x4400, 0x4400, 0x7800, 0x4800, 0x4800, 0x4400, 0x0000, 0x0000,  // R
    0x3800, 0x4400, 0x4000, 0x3000, 0x0800, 0x0400, 0x4400, 0x3800, 0x0000, 0x0000,  // S
    0x7C00, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x0000,  // T
    0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // U
    0x4400, 0x4400, 0x4400, 0x2800, 0x2800, 0x2800, 0x1000, 0x1000, 0x0000, 0x0000,  // V
    0x4400, 0x4400, 0x5400, 0x5400, 0x5400, 0x6C00, 0x2800, 0x2800, 0x0000, 0x0000,  // W
    0x4400, 0x2800, 0x2800, 0x1000, 0x1000, 0x2800, 0x2800, 0x4400, 0x0000, 0x0000,  // X
    0x4400, 0x4400, 0x2800, 0x2800, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x0000,  // Y
    0x7C00, 0x0400, 0x0800, 0x1000, 0x1000, 0x2000, 0x4000, 0x7C00, 0x0000, 0x0000,  // Z
    0x1800, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1800,  // [
    0x2000, 0x2000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0800, 0x0800, 0x0000, 0x0000,  /* \ */
    0x3000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x3000,  // ]
    0x1000, 0x2800, 0x2800, 0x4400, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // ^
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFE00,  // _
    0x2000, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // `
    0x0000, 0x0000, 0x3800, 0x4400, 0x3C00, 0x4400, 0x4C00, 0x3400, 0x0000, 0x0000,  // a
    0x4000, 0x4000, 0x5800, 0x6400, 0x4400, 0x4400, 0x6400, 0x5800, 0x0000, 0x0000,  // b
    0x0000, 0x0000, 0x3800, 0x4400, 0x4000, 0x4000, 0x4400, 0x3800, 0x0000, 0x0000,  // c
    0x0400, 0x0400, 0x3400, 0x4C00, 0x4400, 0x4400, 0x4C00, 0x3400, 0x0000, 0x0000,  // d
    0x0000, 0x0000, 0x3800, 0x4400, 0x7C00, 0x4000, 0x4400, 0x3800, 0x0000, 0x0000,  // e
    0x0C00, 0x1000, 0x7C00, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x0000,  // f
    0x0000, 0x0000, 0x3400, 0x4C00, 0x4400, 0x4400, 0x4C00, 0x3400, 0x0400, 0x7800,  // g
    0x4000, 0x4000, 0x5800, 0x6400, 0x4400, 0x4400, 0x4400, 0x4400, 0x0000, 0x0000,  // h
    0x1000, 0x0000, 0x7000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x0000,  // i
    0x1000, 0x0000, 0x7000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0xE000,  // j
    0x4000, 0x4000, 0x4800, 0x5000, 0x6000, 0x5000, 0x4800, 0x4400, 0x0000, 0x0000,  // k
    0x7000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 0x0000,  // l
    0x0000, 0x0000, 0x7800, 0x5400, 0x5400, 0x5400, 0x5400, 0x5400, 0x0000, 0x0000,  // m
    0x0000, 0x0000, 0x5800, 0x6400, 0x4400, 0x4400, 0x4400, 0x4400, 0x0000, 0x0000,  // n
    0x0000, 0x0000, 0x3800, 0x4400, 0x4400, 0x4400, 0x4400, 0x3800, 0x0000, 0x0000,  // o
    0x0000, 0x0000, 0x5800, 0x6400, 0x4400, 0x4400, 0x6400, 0x5800, 0x4000, 0x4000,  // p
    0x0000, 0x0000, 0x3400, 0x4C00, 0x4400, 0x4400, 0x4C00, 0x3400, 0x0400, 0x0400,  // q
    0x0000, 0x0000, 0x5800, 0x6400, 0x4000, 0x4000, 0x4000, 0x4000, 0x0000, 0x0000,  // r
    0x0000, 0x0000, 0x3800, 0x4400, 0x3000, 0x0800, 0x4400, 0x3800, 0x0000, 0x0000,  // s
    0x2000, 0x2000, 0x7800, 0x2000, 0x2000, 0x2000, 0x2000, 0x1800, 0x0000, 0x0000,  // t
    0x0000, 0x0000, 0x4400, 0x4400, 0x4400, 0x4400, 0x4C00, 0x3400, 0x0000, 0x0000,  // u
    0x0000, 0x0000, 0x4400, 0x4400, 0x2800, 0x2800, 0x2800, 0x1000, 0x0000, 0x0000,  // v
    0x0000, 0x0000, 0x5400, 0x5400, 0x5400, 0x6C00, 0x2800, 0x2800, 0x0000, 0x0000,  // w
    0x0000, 0x0000, 0x4400, 0x2800, 0x1000, 0x1000, 0x2800, 0x4400, 0x0000, 0x0000,  // x
    0x0000, 0x0000, 0x4400, 0x4400, 0x2800, 0x2800, 0x1000, 0x1000, 0x1000, 0x6000,  // y
    0x0000, 0x0000, 0x7C00, 0x0800, 0x1000, 0x2000, 0x4000, 0x7C00, 0x0000, 0x0000,  // z
    0x1800, 0x1000, 0x1000, 0x1000, 0x2000, 0x2000, 0x1000, 0x1000, 0x1000, 0x1800,  // {
    0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000,  // |
    0x3000, 0x1000, 0x1000, 0x1000, 0x0800, 0x0800, 0x1000, 0x1000, 0x1000, 0x3000,  // }
    0x0000, 0x0000, 0x0000, 0x7400, 0x4C00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000   // ~
)
*/