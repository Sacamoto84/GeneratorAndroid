package libs.book
/*
*  ┌ ┐ └ ┘├ ┤ ┬ ┴ ┼ ─ │
* ┌───────────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────┐
* │                                               │
* ├────────────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────┤
* │ Завершение │ * ensureActive() Если job больше не активно, генерируется CancellationException                          │
* │            │ * if (!isActive) { throw CancellationException() }                                                         │
* │            │ * Job.ensureActive()
* │            │ * if (!job.isActive) { throw CancellationException() }
* ├────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────┤
*   yield        Передача потока Диспечеру чтобы он передал другим своми coroutines. Создает CancellationException если
*                корутина Canceled, похож на ensureActive()
* ├────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────┤
*    Job.join    suspend корутину до завершения работы. Если job.cancel потом job.join, то корутина suspend пока не завершится
*                Если  job.join потом job.cancel не имеет смысла
* ├────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────┤
*
*  withContext(Dispatchers.Main)
*  {
*
*  }
*
*
 */